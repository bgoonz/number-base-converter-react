{"version":3,"sources":["NumberInput.js","BaseConverter.js","App.js","serviceWorker.js","index.js"],"names":["NumberInput","props","base","pattern","number","onChange","class","id","value","createRangeReg","extraDigits","String","fromCharCode","Array","keys","slice","maxNo","regRange","toUpperCase","BaseConverter","state","numberInDecimal","NaN","bind","event","target","this","setState","prevState","num","parseInt","convertToDecimal","listOfNumbers","from","val","ind","isNaN","toString","convertFromDecimal","key","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uPAYeA,EAVK,SAACC,GAAW,IACtBC,EAAoCD,EAApCC,KAAMC,EAA8BF,EAA9BE,QAASC,EAAqBH,EAArBG,OAAQC,EAAaJ,EAAbI,SAC/B,OACE,yBAAKC,MAAM,eACT,uCAAaJ,GACb,2BAAOC,QAASA,EAASI,GAAIL,EAAMM,MAAOJ,EAAQC,SAAUA,MCC5DI,EAAiB,SAACP,GACtB,IAAIQ,EAAcC,OAAOC,aAAP,MAAAD,OAAM,YAAiBE,MAAM,KAAKC,SAAQC,MAAM,IAC9DC,EAAQd,EAAO,EACfe,EAAQ,aAASD,EAAT,KAMZ,OALId,EAAO,KACTc,EAAQ,EACRN,EAAcA,EAAYK,MAAM,EAAGb,EAAO,IAC1Ce,EAAQ,aAASD,GAAT,OAAiBN,GAAjB,OAA+BA,EAAYQ,cAA3C,MAEHD,GAkCME,E,kDA9Bb,WAAYlB,GAAQ,IAAD,8BACjB,cAAMA,IACDmB,MAAQ,CAAEC,gBAAiBC,KAChC,EAAKjB,SAAW,EAAKA,SAASkB,KAAd,gBAHC,E,qDAKVC,GAAQ,IAAD,EACQA,EAAMC,OAApBjB,EADM,EACNA,MAAOD,EADD,EACCA,GACfmB,KAAKC,UAAS,SAACC,GAEb,MAAO,CAAEP,gBA3BU,SAACQ,EAAK3B,GAAN,OAAe4B,SAASD,EAAK3B,GA0BpC6B,CAAiBvB,EAAOD,S,+BAI9B,IAAD,OACDyB,EAAgBnB,MAAMoB,KAAKpB,MAAM,KAAK,SAACqB,EAAKC,GAChD,IAAMjC,EAAOiC,EAAM,EACb/B,EAhCe,SAACyB,EAAK3B,GAC/B,OAAOkC,MAAMP,GAAO,GAAKA,EAAIQ,SAASnC,GA+BnBoC,CAAmB,EAAKlB,MAAMC,gBAAiBnB,GAC9D,OACE,kBAAC,EAAD,CACEqC,IAAKJ,EACLjC,KAAMA,EACNE,OAAQA,EACRD,QAASM,EAAeP,GACxBG,SAAU,EAAKA,cAIrB,OAAO,6BAAM2B,O,GA3BWQ,IAAMC,WCNnBC,EAXH,WACV,OACE,yBAAKC,UAAU,sBACb,yBAAKA,UAAU,SAAf,yBACA,6BACE,kBAAC,EAAD,SCIYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.99386f82.chunk.js","sourcesContent":["import React from \"react\";\n\nconst NumberInput = (props) => {\n  const { base, pattern, number, onChange } = props;\n  return (\n    <div class=\"numberBlock\">\n      <label>Base {base}</label>\n      <input pattern={pattern} id={base} value={number} onChange={onChange} />\n    </div>\n  );\n};\n\nexport default NumberInput;\n","import React from \"react\";\nimport NumberInput from \"./NumberInput\";\n\nconst convertToDecimal = (num, base) => parseInt(num, base);\nconst convertFromDecimal = (num, base) => {\n  return isNaN(num) ? \"\" : num.toString(base);\n};\n\nconst createRangeReg = (base) => {\n  let extraDigits = String.fromCharCode(...Array(103).keys()).slice(97);\n  let maxNo = base - 1;\n  let regRange = `[0-${maxNo}]`;\n  if (base > 10) {\n    maxNo = 9;\n    extraDigits = extraDigits.slice(0, base - 10);\n    regRange = `[0-${maxNo}${extraDigits}${extraDigits.toUpperCase()}]`;\n  }\n  return regRange;\n};\n\nclass BaseConverter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { numberInDecimal: NaN };\n    this.onChange = this.onChange.bind(this);\n  }\n  onChange(event) {\n    const { value, id } = event.target;\n    this.setState((prevState) => {\n      const num = convertToDecimal(value, id);\n      return { numberInDecimal: num };\n    });\n  }\n  render() {\n    const listOfNumbers = Array.from(Array(15), (val, ind) => {\n      const base = ind + 2;\n      const number = convertFromDecimal(this.state.numberInDecimal, base);\n      return (\n        <NumberInput\n          key={ind}\n          base={base}\n          number={number}\n          pattern={createRangeReg(base)}\n          onChange={this.onChange}\n        />\n      );\n    });\n    return <div>{listOfNumbers}</div>;\n  }\n}\n\nexport default BaseConverter;\n","import React from \"react\";\nimport BaseConverter from \"./BaseConverter\";\n\nconst App = () => {\n  return (\n    <div className=\"App base-converter\">\n      <div className=\"title\">Number Base Converter</div>\n      <div>\n        <BaseConverter />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}